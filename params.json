{"name":"USBGuard","tagline":"The usbguard software framework helps to protect your computer against rogue USB devices by implementing basic whitelisting/blacklisting capabilities based on USB device attributes.","body":"# USBGuard\r\n\r\nThe USBGuard software framework helps to protect your computer against rogue USB devices by implementing basic\r\nwhitelisting/blacklisting capabilities based on USB device attributes.\r\n\r\n**WARNING**: The 0.x releases are not production ready packages. They serve for tech-preview and user feedback purposes\r\nonly. Please share your feedback or request a feature in the Github issue trackers for each project:\r\n\r\nReport a bug or request a feature in [usbguard](https://github.com/dkopecek/usbguard/issues/new)\r\nReport a bug or request a feature in [usbguard-applet-qt](https://github.com/dkopecek/usbguard-applet-qt/issues/new)\r\n\r\n## Supported Operating Systems\r\n\r\nCurrently, USBGuard works only on Linux. To enforce the user-defined policy, it uses the USB device authorization feature\r\nimplemented in the Linux kernel since the year 2007. Read [this document](https://www.kernel.org/doc/Documentation/usb/authorization.txt)\r\nif you want to know more.\r\n\r\n## Compilation\r\n\r\nIf you want to compile the sources from a release tarball, you'll have to install development files for:\r\n\r\n * [libqb](https://github.com/ClusterLabs/libqb) - used for IPC\r\n * [libsodium](http://libsodium.org) - used for hashing\r\n * systemd-devel - used for udev\r\n\r\nAnd then do:\r\n\r\n    $ ./configure\r\n    $ make\r\n    $ sudo make install\r\n\r\nIf you want to compile the sources in a cloned repository, there's one additional step required:\r\n\r\n\t$ git submodule init\r\n\r\nThis will fetch the sources of [cppformat](https://github.com/cppformat/cppformat), [json](https://github.com/nlohmann/json/)\r\nand [spdlog](https://github.com/gabime/spdlog) which are used in this project too.\r\n\r\n## Pre-compiled packages\r\n\r\n### Fedora Linux\r\n\r\nPre-compiled packages for Fedora 20, 21, 22 and rawhide are distributes using a Copr [repository](https://copr.fedoraproject.org/coprs/mildew/usbguard/).\r\nYou can install the repository by executing the following steps:\r\n\r\n    $ sudo yum install yum-plugin-copr\r\n    $ sudo yum copr enable mildew/usbguard\r\n    $ sudo yum install usbguard\r\n\r\nTo actually start the daemon, use:\r\n\r\n    $ sudo systemctl start usbguard.service\r\n\r\n## Rules\r\n\r\nThe usbguard daemon decides which USB device to authorize based on a policy defined by a set of rules. When an USB device is inserted into\r\nthe system, the daemon scans the existing rules sequentially and when a matching rule is found, it either authorizes (allows), deauthorizes\r\n(blocks) or removes (rejects) the device, based on the rule target. If no matching rule is found, the decision is based on an implicit default\r\ntarget. This implicit default is to block the device until a decision is made by the user.\r\n\r\nThe rule language grammar, expressed in a BNF-like syntax, is the following:\r\n\r\n    rule ::= target device.\r\n\r\n    target ::= \"allow\" | \"block\" | \"reject\".\r\n\r\n    device ::= device_id device_attributes.\r\n    device ::= .\r\n\r\n    device_id ::= \"*:*\" | vendor_id \":*\" | vendor_id \":\" product_id.\r\n\r\n    device_attributes ::= device_attributes | attribute.\r\n    device_attributes ::= .\r\n\r\n    attribute ::= name string.\r\n\r\n### Targets\r\n\r\nThe target of a rule specifies whether the device will be authorized for use or not. Three types of target are recognized:\r\n\r\n * `allow` - authorize the device\r\n * `block` - deauthorize the device\r\n * `reject` - remove the device from the system\r\n\r\n### Device specification\r\n\r\nExcept the target, all the other fields of a rule need not be specified. Such a minimal rule will match any device and\r\nallows the policy creator to write an explicit default target (there's an implicit one too, more on that later).\r\nHowever, if one want's to narrow the applicability of a rule to a set of devices or one device only, it's possible to\r\ndo so with a device id and/or device attributes.\r\n\r\n#### Device ID\r\n\r\nA USB device ID, as understood by usbguard, is the colon delimited pair *vendor\\_id:product\\_id*. All USB devices have this\r\nID assigned by the manufacturer and it should uniquely identify a USB product. Both *vendor\\_id* and *product\\_id* are 16-bit\r\nnumbers represented in hexadecimal base.\r\n\r\nIn the rule, it's possible to use an asterisk character to match either any device ID `*:*` or any product ID from a\r\nspecific vendor, e.g. `1234:*`.\r\n\r\n#### Device attributes\r\n\r\nDevice attributes are specific value read from the USB device after it's inserted to the system. Which attributes are\r\navailable is defined bellow. Some of the attributes are derived or based on attributes read directly from the device.\r\nThe value of an attribute is represented as a double-quoted string.\r\n\r\nList of attributes:\r\n\r\n * `class \"NN\"`\r\n * `hash \"[0-9a-f]{32}\"`\r\n * `name \"...\"`\r\n * `port \"[0-9]{1,2}-[0-9]{1,2}\"`\r\n * `port { \"[0-9]{1,2}-[0-9]{1,2}\" \"[0-9]{1,2}-[0-9]{1,2}\" ... }`\r\n\r\n### Initial policy\r\n\r\nThere's currently no tool to generate an initial rule set for devices that the user wants to allow by default.\r\nHowever, using the following bash oneliner, you can generate a simple allow policy for USB devices connected\r\nto the system at the moment of generating the policy:\r\n\r\n    # lsusb | sed -n 's|.*\\([0-9a-f]\\{4\\}:[0-9a-f]\\{4\\}\\) \\(.*\\)|allow \\1|p' > /etc/usbguard/rules.conf\r\n\r\nFuture releases will include a tool to generate more complex initial policies.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}